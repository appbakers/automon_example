/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.61
 * Generated at: 2015-05-17 06:32:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.fdsapi.*;
import com.fdsapi.arrays.*;
import net.sf.xsshtmlfilter.HTMLFilter;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import com.jamonapi.*;
import com.jamonapi.proxy.*;
import com.jamonapi.utils.*;
import com.jamonapi.distributed.*;

public final class query_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {




	

  // interface and class to show interface monitoring work on a custom class.
  public interface MyInterface {
     public int myOpen();
     public int myClose();
    
  }


  private static class MyObject implements MyInterface {
     public int myOpen(){
        return 1;
     }

     public int myClose(){
        return 1;
     }


  } 


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> \n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<META http-equiv=\"Content-Type\" content=\"text/html\"; charset=ISO-8859-1\">\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/JAMonStyles.css\">\n");
      out.write("<title>JAMon Test Queries</title>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("<!--\n");
      out.write("// Row highlighter\n");
      out.write("var objClass\n");
      out.write("\n");
      out.write("function rollOnRow(obj, txt) {\n");
      out.write("    objClass = obj.className\n");
      out.write("    obj.className = \"rowon\";\n");
      out.write("    obj.title = txt;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function rollOffRow(obj) {\n");
      out.write("    obj.className = objClass;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function selectAll(obj, numRows) {\n");
      out.write("    state = (obj.checked) ? true : false;\n");
      out.write("\n");
      out.write("    for (var i = 1; i < numRows + 1; i ++) {\n");
      out.write("        currRow = eval(\"obj.form.row_\" + i);\n");
      out.write("        currRow.checked = state;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function helpWin() {\n");
      out.write("    newWin = window.open('JAMonHelp.htm', 'helpWin', 'resizable=no,scrollbars=yes,height=550,width=450,screenX=100,screenY=100');\n");
      out.write("    if (newWin.opener == null) newWin.opener = self;\n");
      out.write("}\n");
      out.write("// -->\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<br><br>\n");
      out.write("<div align=\"center\">\n");
      out.write("<form action=\"query.jsp\" method=\"post\">  \n");
      out.write("   <input type=\"submit\" name=\"generateData\" value=\"Generate Data!\">\n");
      out.write(" </form>\n");
      out.write("\n");
      out.write("<form action=\"query.html\" method=\"get\">  \n");
      out.write("   <input type=\"submit\" name=\"showCode\" value=\"Show Code!\">\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("<br><br>\n");
      out.write("<hr>\n");
      out.write("\n");

boolean generateData=(request.getParameter("generateData")==null) ? false : true;

if (generateData) {

      out.write('\n');
      out.write('\n');



FormattedDataSet fds=new FormattedDataSet();
// Load db driver to be monitored. Although the example uses HSQLDB, any JDBC Connection will do.
Class.forName("org.hsqldb.jdbcDriver");

// monitor table accesses.  Accesses to these tables will show up in the JAMon report
List tables=new ArrayList();
tables.add("SYSTEM_TYPEINFO");
tables.add("SYSTEM_TABLES");
MonProxyFactory.setMatchStrings(tables);
  
// Connect to the database and monitor the returned Connection.  That is all you have to do!!!
// All SQL, Exceptions and method calls on JDBC interfaces will now be monitored!
Connection conn = MonProxyFactory.monitor(DriverManager.getConnection("jdbc:hsqldb:.",  "sa", ""));
Statement st=conn.createStatement();
ResultSet rs=st.executeQuery("select * from INFORMATION_SCHEMA.SYSTEM_TYPEINFO where LOCAL_TYPE_NAME IN ('INTEGER', 'DECIMAL', 'TINYINT') order by 1 desc");


// The formattedDataSet is another API of mine that renders TabularData among other things.        
String html="";
html=fds.getFormattedDataSet(new ResultSetConverter(rs), "htmlTable");                                       
rs.close();
st.close();

// Monitor the PreparedStatement.  Note the SQL Detail report will show how many times the PreparedStatement 
// was reused.
PreparedStatement ps=conn.prepareStatement("select * from INFORMATION_SCHEMA.SYSTEM_TYPEINFO where LOCAL_TYPE_NAME=?");
ps.setString(1, "INTEGER");

rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();
rs = ps.executeQuery();

// create html for the last resultSet only
String html1="";
html1=fds.getFormattedDataSet(new ResultSetConverter(rs), "htmlTable");      	  


// Run and Monitor another couple queries
st=conn.createStatement();
rs=st.executeQuery("select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE from INFORMATION_SCHEMA.SYSTEM_TABLES");
String html2="";
html2=fds.getFormattedDataSet(new ResultSetConverter(rs), "htmlTable");      	  

rs=st.executeQuery("select * from INFORMATION_SCHEMA.SYSTEM_USERS");
String html3="";
html3=fds.getFormattedDataSet(new ResultSetConverter(rs), "htmlTable");    

// Throw an exception and show that it is also monitored in jamonadmin.jsp and exceptions.jsp
// Note also even though the catch block is empty it will show up in these pages.
try { 
 // get a query to throw an Exception.  If enabled will show in jamon report and sql details.
 st.executeQuery("select * from i_do_not_exist");  

} catch (Exception e) {} 
 	  
                            

conn.close();

// Show that that MonProxy also works with ANY interface.  In this case an inner class is used.
MyInterface myObj=(MyInterface) MonProxyFactory.monitor(new MyObject());

// method calls will show in the jamon report
myObj.myOpen();
myObj.myClose(); 



      out.write("\n");
      out.write("\n");
      out.write("<p><b>You can see the results from these queries in the various JAMon support pages.</b></p>\n");
      out.write("\n");
      out.write("Query=select * from INFORMATION_SCHEMA.SYSTEM_TYPEINFO where LOCAL_TYPE_NAME IN ('INTEGER', 'DECIMAL', 'TINYINT') order by 1 desc\n");
      out.print(html);
      out.write("\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("Query=select * from INFORMATION_SCHEMA.SYSTEM_TYPEINFO where LOCAL_TYPE_NAME=?\n");
      out.print(html1);
      out.write("\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("Query=select * from INFORMATION_SCHEMA.SYSTEM_TABLES\n");
      out.print(html2);
      out.write("\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("Query=select * from INFORMATION_SCHEMA.SYSTEM_USERS\n");
      out.print(html3);
      out.write('\n');
      out.write('\n');

} // end if (generateData)


      out.write("\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("<div align=\"center\" style=\"padding-top : 30px;\">\n");
      out.write("<hr width=\"580\" align=\"center\" />\n");
      out.write("<a href=\"menu.jsp\">Home</a> | <a href=\"jamonadmin.jsp\">JAMonAdmin</a> |<a href=\"sql.jsp\">SQL Buffer</a> | <a href=\"exceptions.jsp\">Exceptions</a>\n");
      out.write("<hr width=\"580\" align=\"center\" />\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<br><br>\n");
      out.write("<td><table border='0' align='center' width='25%'>\n");
      out.write("    <tr>\n");
      out.write("    <th nowrap><a href=\"http://www.jamonapi.com\"><img src=\"images/jamon_small.jpg\" id=\"monLink\" border=\"0\" /></a></th>\n");
      out.write("    <th nowrap>JAMon ");
      out.print(MonitorFactory.getVersion());
      out.write("</th>\n");
      out.write("    <th nowrap><a href=\"http://www.fdsapi.com\"><img height=40 width=80 src=\"images/fds_logo_small.jpg\" id=\"monLink\" border=\"0\" /></a></th>\n");
      out.write("    </tr>\n");
      out.write("</table></td>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
