/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.61
 * Generated at: 2015-05-17 06:36:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.fdsapi.*;
import com.fdsapi.arrays.*;
import net.sf.xsshtmlfilter.HTMLFilter;
import java.util.Date;
import com.jamonapi.*;
import com.jamonapi.proxy.*;
import com.jamonapi.utils.*;
import com.jamonapi.distributed.*;

public final class monmanage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {





private String checked(String compareType, String listenerType) {
   return (compareType.equalsIgnoreCase(listenerType)) ? "checked" : "";
}

private MonKey getMonKey(MonitorComposite mc, int keyNum) {
   if (mc==null) {
       return null;
   }

   Monitor[] monitors=mc.getMonitors();
   if (monitors==null || monitors[keyNum]==null) {
       return null;
   }

   return monitors[keyNum].getMonKey();
}

private void addListeners(HttpServletRequest request,  MonKey key) {
  String addListener=request.getParameter("addlistener");
  String listenerType=request.getParameter("listenertype");
  if (addListener!=null && listenerType!=null) {
   
   String[] add=request.getParameterValues("availablelistener");
   int rows=(add==null) ? 0 : add.length;

   if (MonitorFactory.exists(key)) {
     Monitor mon=MonitorFactory.getMonitor(key);
     for (int i=0;i<rows;i++) {
         
      if (!mon.hasListener(listenerType,add[i])) {
         JAMonListener listener=JAMonListenerFactory.get(add[i]);
         mon.addListener(listenerType,listener);
      }

     }

   }

  }
}

private void removeListeners(HttpServletRequest request, MonKey key) {
  String removeListener=request.getParameter("removelistener");
  String listenerType=request.getParameter("listenertype");
  if (removeListener!=null && listenerType!=null) {
   
   String[] remove=request.getParameterValues("currentlistener");
   int rows=(remove==null) ? 0 : remove.length;

   if (MonitorFactory.exists(key)) {
     Monitor mon=MonitorFactory.getMonitor(key);
     
     for (int i=0;i<rows;i++) {
        if (mon.hasListener(listenerType, remove[i])) {
           mon.removeListener(listenerType,remove[i]);
     }

     }

   }

  }

}

private ResultSetConverter getAvailableListeners() {
   return new ResultSetConverter(JAMonListenerFactory.getHeader(), JAMonListenerFactory.getData()).execute("select col0 as availablelistener,col0 as availabillistenerdisp from array order by col0 asc");
 
}

private ResultSetConverter getCurrentListeners(MonitorComposite mc, MonKey key, String listenerType) {
   if (mc.exists(key)  && mc.getMonitor(key).hasListeners(listenerType)) {
      return getCurrentListeners(mc.getMonitor(key).getListenerType(listenerType).getListener());
   }
   
   return new ResultSetConverter(new String[]{"none"}, new Object[][]{{"No Listeners"}}).execute("select col0 as currentlistener,col0 as currentlistenerdisp from array order by col0 asc");
 
}

private ResultSetConverter getCurrentListeners( Monitor mon, String listenerType) {
   if (mon.hasListeners(listenerType)) {
            return getCurrentListeners(mon.getListenerType(listenerType).getListener());
   }

   return new ResultSetConverter(new String[]{"none"}, new Object[][]{{"No Listeners"}}).execute("select col0 as currentlistener,col0 as currentlistenerdisp from array order by col0 asc");
}

private ResultSetConverter getCurrentListeners(JAMonListener listener) {
  if (listener==null)
    return null;

  // don't need to wrap listener if it is already a compositelistener, but
  // it makes the following code easier.
  CompositeListener l=new CompositeListener();
  return new ResultSetConverter(l.getHeader(), l.addListener(listener).getData()).execute("select col0 as currentlistener,col0 as currentlistenerdisp from array order by col0 asc");

}

// Format time String in current locale.
private String now() {
  return LocaleContext.getDateFormatter().format(new Date());
}





// if the value is null then return the passed in default else return the value
private static String getValue(String value, String defaultValue) {
    HTMLFilter  vFilter = new HTMLFilter();
    return (value==null || "".equals(value.trim())) ? defaultValue: vFilter.filter(value);
}


// convert arg to an int or return the default
private static int getNum(String value, String defaultValue) {

  String retValue=getValue(value, defaultValue);
  char[] digits=retValue.toCharArray();
  boolean isDigit=true;
  for (int i=0;i<digits.length;i++) {
     if (!Character.isDigit(digits[i]))
       isDigit=false;
  }

  if (!isDigit)
    retValue=defaultValue;

  return Integer.parseInt(retValue);
}


private static void executeAction(String action, MonKey key) {
if (MonitorFactory.exists(key)) {
 if ("Reset".equalsIgnoreCase(action))
    MonitorFactory.getMonitor(key).reset();
 else if ("Enable".equalsIgnoreCase(action)) 
    MonitorFactory.getMonitor(key).enable();
 else if ("Disable".equalsIgnoreCase(action))  
    MonitorFactory.getMonitor(key).disable();
 }
}






  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");


FormattedDataSet fds=new FormattedDataSet();

// Assign request parameters to local variables.
String action    = getValue(request.getParameter("monitormgmt"),"");
MonitorComposite mc = (MonitorComposite) session.getAttribute("monitorComposite");
MonKey key=null;

int keyNum=0;
// monKey is the previous key that the user picked in session.  i.e. they didn't come by clicking on jamonadmin.jsp
if (request.getParameter("key")==null  && session.getAttribute("monKey")!=null) {
//  keyNum=Integer.parseInt((String)session.getAttribute("keyNum"));
  key=(MonKey) session.getAttribute("monKey");
} else if (request.getParameter("key")!=null) {
  keyNum=getNum(request.getParameter("key"), "1")-1;
  key=getMonKey(mc, keyNum);
  session.setAttribute("monKey", key);
  session.setAttribute("keyNum", keyNum);
}


String listenerType = "value";
if (request.getParameter("listenertype")==null  && session.getAttribute("listenerType")!=null)
  listenerType=(String)session.getAttribute("listenerType");
else if (request.getParameter("listenertype")!=null) {
  listenerType=(String)request.getParameter("listenertype");
}

session.setAttribute("listenerType", listenerType);
// note can't work on key if there is more than
if (mc.isLocalInstance()) {
    executeAction(action, key);
    addListeners(request, key);
    removeListeners(request, key);
}

Monitor mon=null;
boolean hasListeners=false;
boolean enabled=false;
if (mc.isLocalInstance() && mc.exists(key)) {
  mon=mc.getMonitor(key);
  hasListeners=mon.hasListeners();
  enabled=mon.isEnabled();
} else  {
    mon=mc.getMonitors()[keyNum];
    hasListeners=mon.hasListeners();
    enabled=mon.isEnabled();
}


      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<META http-equiv=\"Content-Type\" content=\"text/html\"; charset=ISO-8859-1\">\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/JAMonStyles.css\">\n");
      out.write("<title>Manage Monitor - ");
      out.print(key);
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print(now());
      out.write("</title>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("<!--\n");
      out.write("// Row highlighter\n");
      out.write("var objClass\n");
      out.write("\n");
      out.write("function rollOnRow(obj, txt) {\n");
      out.write("    objClass = obj.className\n");
      out.write("    obj.className = \"rowon\";\n");
      out.write("    //obj.title = txt;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function rollOffRow(obj) {\n");
      out.write("    obj.className = objClass;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function selectAll(obj, numRows) {\n");
      out.write("    state = (obj.checked) ? true : false;\n");
      out.write("\n");
      out.write("    for (var i = 1; i < numRows + 1; i ++) {\n");
      out.write("        currRow = eval(\"obj.form.row_\" + i);\n");
      out.write("        currRow.checked = state;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function helpWin() {\n");
      out.write("    newWin = window.open('jamonhelp.htm', 'helpWin', 'resizable=no,scrollbars=yes,height=550,width=450,screenX=100,screenY=100');\n");
      out.write("    if (newWin.opener == null) newWin.opener = self;\n");
      out.write("}\n");
      out.write("// -->\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<div align=\"center\">\n");
      out.write("\n");
      out.write("<table bgcolor='#DCE2E8'>\n");
      out.write("<th>\n");
      out.write("<fieldset>\n");
      out.write("    <legend>Monitor Management ");
      out.print( (enabled) ? "(enabled)" : "(disabled)" );
      out.write("</legend>\n");
      out.write("<form class=\"even\" action=\"monmanage.jsp\" method=\"post\">\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"monitormgmt\" value=\"enable\"> Enable\n");
      out.write("<input type=\"radio\" name=\"monitormgmt\" value=\"disable\"> Disable\n");
      out.write("<input type=\"radio\" name=\"monitormgmt\" value=\"reset\"> Reset\n");
      out.write("<br><br>\n");
      out.write("<input type=\"submit\" name=\"monitoraction\" title=\"Take selected action on a Monitor\" value=\"Submit\" >\n");
      out.write("\n");
      out.write("\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("<form class=\"even\" action=\"monmanage.jsp\" method=\"post\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>Listener Management ");
      out.print( (hasListeners) ? "(has listeners)" : "(no listeners)" );
      out.write("\n");
      out.write("\n");
      out.write("</legend>\n");
      out.write("<br>\n");
      out.write("\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"listenertype\" value=\"value\" onClick=\"this.form.action='monmanage.jsp'; this.form.submit();\" ");
      out.print(checked("value", listenerType));
      out.write(" > Value\n");
      out.write("<input type=\"radio\" name=\"listenertype\" value=\"max\" onClick=\"this.form.action='monmanage.jsp'; this.form.submit();\" ");
      out.print(checked("max", listenerType));
      out.write(" > Max\n");
      out.write("<input type=\"radio\" name=\"listenertype\" value=\"min\" onClick=\"this.form.action='monmanage.jsp'; this.form.submit();\" ");
      out.print(checked("min", listenerType));
      out.write(" > Min\n");
      out.write("<input type=\"radio\" name=\"listenertype\" value=\"maxactive\" onClick=\"this.form.action='monmanage.jsp'; this.form.submit();\" ");
      out.print(checked("maxactive", listenerType));
      out.write(" > MaxActive\n");
      out.write("<br><br><hr>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<table>\n");
      out.write("<th>\n");
      out.write("Available:<br>\n");
      out.write("   ");
      out.print(fds.getMultiSelectListBox(getAvailableListeners() , new String[]{""},5));
      out.write("\n");
      out.write("<br>\n");
      out.write("&nbsp;\n");
      out.write("\n");
      out.write("</th>\n");
      out.write("\n");
      out.write("<!--\n");
      out.write("    The following hack of calling setTimeout is to fix a bug within safari that didn't properly submit the form.\n");
      out.write("-->\n");
      out.write("<th>\n");
      out.write("        <input type=\"submit\" name=\"addlistener\" title=\"Add Listener\" value=\"--->\" onClick=\"this.form.action='monmanage.jsp'; setTimeout(function() {\n");
      out.write("        this.form.submit();\n");
      out.write("        }, 10);\">\n");
      out.write("    <br><br>\n");
      out.write("    <input type=\"submit\" name=\"removelistener\" title=\"Remove Listener\" value=\"<---\" onClick=\"this.form.action='monmanage.jsp'; setTimeout(function() {\n");
      out.write("        this.form.submit();\n");
      out.write("        }, 10);\">\n");
      out.write("</th>\n");
      out.write("\n");

    String currentListenersHtml = "";
    if (mc.isLocalInstance()) {
        currentListenersHtml = fds.getMultiSelectListBox(getCurrentListeners(mc, key, listenerType) , new String[]{""}, 5);
    } else {
        currentListenersHtml = fds.getMultiSelectListBox(getCurrentListeners(mon, listenerType) , new String[]{""}, 5);
    }


      out.write("\n");
      out.write("<th>\n");
      out.write("Current:<br>\n");
      out.write("    ");
      out.print(currentListenersHtml);
      out.write("\n");
      out.write("<br>\n");
      out.write("\n");
      out.write("<input type=\"submit\" name=\"displaylistener\" title=\"Display Listener\" value=\"Display\" onClick=\"this.form.action='mondetail.jsp'; this.form.submit();\" >\n");
      out.write("</th>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("\n");
      out.write("</th>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"monkey\"><b>");
      out.print(key);
      out.write("</b></div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("<div align=\"center\" style=\"padding-top : 30px;\">\n");
      out.write("<hr width=\"580\" align=\"center\" />\n");
      out.write("<a href=\"menu.jsp\">Home</a> | <a href=\"jamonadmin.jsp\">JAMonAdmin</a> | <a href=\"sql.jsp\">SQL Details</a> | <a href=\"exceptions.jsp\">Exception Details</a>\n");
      out.write("<hr width=\"580\" align=\"center\" />\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("<div align=\"left\">\n");
      out.write("Monitor: ");
      out.print(mon);
      out.write("\n");
      out.write("</div>\n");
      out.write("<br>\n");
      out.write("<div align=\"center\">\n");
      out.write("    Data Refreshed for '");
      out.print( mc.getInstanceName() );
      out.write("' on: ");
      out.print( mc.getDateCreated() );
      out.write("\n");
      out.write("    <br>\n");
      out.write("    JAMon configuration properties: ");
      out.print( JamonDataPersisterFactory.getJamonProperties() );
      out.write("\n");
      out.write("    <br>\n");
      out.write("    JamonDataPersister being used: ");
      out.print( JamonDataPersisterFactory.get().getClass().getCanonicalName()  );
      out.write("\n");
      out.write("</div>\n");
      out.write("<br>\n");
      out.write("\n");
      out.write("<br><br>\n");
      out.write("<td><table border='0' align='center' width='25%'>\n");
      out.write("    <tr>\n");
      out.write("    <th nowrap><a href=\"http://www.jamonapi.com\"><img src=\"images/jamon_small.jpg\" id=\"monLink\" border=\"0\" /></a></th>\n");
      out.write("    <th nowrap>JAMon ");
      out.print(MonitorFactory.getVersion());
      out.write("</th>\n");
      out.write("    <th nowrap><a href=\"http://www.fdsapi.com\"><img height=40 width=80 src=\"images/fds_logo_small.jpg\" id=\"monLink\" border=\"0\" /></a></th>\n");
      out.write("    </tr>\n");
      out.write("</table></td>\n");
      out.write("\n");

  String debugStr="";
  if (request.getParameter("debug")!=null) 
    session.setAttribute("debugjamon","true");

   if (session.getAttribute("debugjamon")!=null)
    debugStr=fds.getFormattedDataSet(new String[]{"parameter","value"}, Utils.getParameters(request), "htmlTable");

      out.write('\n');
      out.write('\n');
      out.print(debugStr);
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
